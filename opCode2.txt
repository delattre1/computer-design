alias enable_W_RET    : std_logic is saida(11);
alias JMP             : std_logic is saida(10);
alias RET             : std_logic is saida(9);
alias JSR             : std_logic is saida(8);
alias JEQ             : std_logic is saida(7);
alias SelMUX          : std_logic is saida(6);
alias Habilita_A      : std_logic is saida(5);
alias Operacao_ULA    : std_logic_vector (1 downto 0) is saida(4 downto 3);
alias habilitaFlagEQ  : std_logic is saida(2);
alias enable_R_RAM    : std_logic is saida(1);
alias enable_W_RAM    : std_logic is saida(0);

begin
saida <= "00" when  opcode = NOP  else
         "10" when  opcode = LDA  else
         "10" when  opcode = SOMA else
         "10" when  opcode = SUB  else	
         "00" when  opcode = LDI  else
	 "01" when  opcode = STA  else
	 "00" when  opcode = JMP  else
	 "00" when (opcode = JEQ and flagEQ = '1')  else
	 "10" when  opcode = CEQ  else
	 "00" when  opcode = JSR  else
	 "00" when  opcode = RET  else
         "00";  -- NOP para os opcodes Indefinidos


enable_W_RET    <= '1'  when (opcode = JSR)   else '0';   
JMP             <= '1'  when (opcode = JMP)   else '0';
RET             <= '1'  when (opcode = RET)   else '0';
JSR             <= '1'  when (opcode = JSR)   else '0';
JEQ             <= '1'  when (opcode = JEQ and flagEQ = '1')   else '0';
SelMUX          <= '1'  when (opcode = LDI)   else '0';
Habilita_A      <= '1'  when (opcode = LDA or opcode = SOMA or opcode = SUB or opcode = LDI)   else '0';
Operacao_ULA    <= '00' when (opcode = SOMA)  else '01' when (opcode = SUB or opcode = CEQ) else '11';
habilitaFlagEQ  <= '1'  when (opcode = CEQ)   else '0';
enable_R_RAM    <= '1'  when (opcode = LDA or opcode = SOMA or opcode = SUB or opcode = CEQ) else '0';
enable_W_RAM    <= '1'  when (opcode = STA)   else '0';

begin
saida <= "000000000000" when  opcode = NOP  else
         "000000111010" when  opcode = LDA  else
         "000000100010" when  opcode = SOMA else
         "000000101010" when  opcode = SUB  else	
         "000001111000" when  opcode = LDI  else
	 "000000011001" when  opcode = STA  else
	 "010000000000" when  opcode = JMP  else
	 "000010000000" when (opcode = JEQ and flagEQ = '1')  else
	 "000000101110" when  opcode = CEQ  else
	 "100100000000" when  opcode = JSR  else
	 "001000000000" when  opcode = RET  else
         "000000000000";  -- NOP para os opcodes Indefinidos




			
			tmp(0)  :=  "1001000001110"; --JSR @14	Deve desviar para a posição 14
			tmp(1)  :=  "0110000000101"; --JMP @5	Deve desviar para a posição 5
			tmp(2)  :=  "0111000001001"; --JEQ @9	Deve desviar para a posição 9
			tmp(3)  :=  "0000000000000"; --NOP	
			tmp(4)  :=  "0000000000000"; --NOP	
			tmp(5)  :=  "0100000000101"; --LDI $5	Carrega acumulador com valor 5
			tmp(6)  :=  "0101000000000"; --STA @0	Armazena 5 na posição 0 da memória
			tmp(7)  :=  "1000000000000"; --CEQ @0	A comparação deve fazer o flagIgual ser 1
			tmp(8)  :=  "0110000000010"; --JMP @2	Vai testar o flagIgual depois do jump
			tmp(9)  :=  "0000000000000"; --NOP	
			tmp(10) :=  "0100000000100"; --LDI $4	Carrega acumulador com valor 4
			tmp(11) :=  "1000000000000"; --CEQ @0	Compara com valor 5, deve fazer o flagIgual ser 0
			tmp(12) :=  "0111000000011"; --JEQ @3	Não deve ocorrer o desvio
			tmp(13) :=  "0110000001101"; --JMP @13	Fim. Deve ficar neste laço
			tmp(14) :=  "0000000000000"; --NOP	
			tmp(15) :=  "1010000000000"; --RET	Retorna para a posição 1

